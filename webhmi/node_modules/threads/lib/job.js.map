{"version":3,"sources":["job.js"],"names":[],"mappings":";;;;;;;;;;6BACyB,eAAe;;;;IAEnB,GAAG;YAAH,GAAG;;AACX,WADQ,GAAG,CACV,IAAI,EAAE;0BADC,GAAG;;AAEpB,4BAAO,CAAC;AACR,QAAI,CAAC,IAAI,GAAK,IAAI,CAAC;AACnB,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;AAEnB,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;;AAEnB,QAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;GAC3B;;AAVkB,KAAG,WAYtB,GAAG,GAAA,eAAU;sCAAN,IAAI;AAAJ,UAAI;;;AACT,QAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,YAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;KAC1D;;AAED,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,WAAO,IAAI,CAAC;GACb;;AAnBkB,KAAG,WAqBtB,IAAI,GAAA,gBAAU;AACZ,QAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AAC7B,YAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD;;uCAHK,IAAI;AAAJ,UAAI;;;AAKV,QAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;AAErB,QAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACxB,WAAO,IAAI,CAAC;GACb;;AA9BkB,KAAG,WAgCtB,SAAS,GAAA,mBAAC,MAAM,EAAE;;;AAChB,6BAAA,qBAAA,MAAM,CACH,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAC7C,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,EAC5C,GAAG,MAAA,oBAAI,IAAI,CAAC,OAAO,CAAC,EACpB,IAAI,MAAA,wBAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAE1B,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;AAErB,QAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC3B,WAAO,IAAI,CAAC;GACb;;AA3CkB,KAAG,WA6CtB,OAAO,GAAA,mBAAG;;;;AAER,WAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAK;;AAE9B,UAAI,CAAC,MAAK,MAAM,EAAE;AAChB,cAAK,IAAI,CAAC,eAAe,EAAE,YAAM;AAC/B,iBAAO,CAAC,MAAK,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;SAChC,CAAC,CAAC;OACJ,MAAM;AACL,eAAO,CAAC,MAAK,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;OAChC;KACF,CAAC,CAAC;GACJ;;SAzDkB,GAAG;;;qBAAH,GAAG","file":"job.js","sourcesContent":["\nimport EventEmitter from 'eventemitter3';\n\nexport default class Job extends EventEmitter {\n  constructor(pool) {\n    super();\n    this.pool   = pool;\n    this.thread = null;\n\n    this.runArgs = [];\n    this.sendArgs = [];\n\n    pool.emit('newJob', this);\n  }\n\n  run(...args) {\n    if (args.length === 0) {\n      throw new Error('Cannot call .run() without arguments.');\n    }\n\n    this.runArgs = args;\n    return this;\n  }\n\n  send(...args) {\n    if (this.runArgs.length === 0) {\n      throw new Error('Cannot .send() before .run().');\n    }\n\n    this.sendArgs = args;\n\n    this.emit('readyToRun');\n    return this;\n  }\n\n  executeOn(thread) {\n    thread\n      .once('message', this.emit.bind(this, 'done'))\n      .once('error', this.emit.bind(this, 'error'))\n      .run(...this.runArgs)\n      .send(...this.sendArgs);\n\n    this.thread = thread;\n\n    this.emit('threadChanged');\n    return this;\n  }\n\n  promise() {\n    // Always return a promise\n    return new Promise((resolve) => {\n      // If the thread isn't set, listen for the threadChanged event\n      if (!this.thread) {\n        this.once('threadChanged', () => {\n          resolve(this.thread.promise());\n        });\n      } else {\n        resolve(this.thread.promise());\n      }\n    });\n  }\n}\n"],"sourceRoot":"/source/"}