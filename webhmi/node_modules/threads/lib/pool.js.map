{"version":3,"sources":["pool.js"],"names":[],"mappings":"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","file":"pool.js","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport Job          from './job';\nimport defaults     from './defaults';\nimport { spawn }    from './';\n\nexport default class Pool extends EventEmitter {\n  constructor(threads) {\n    super();\n    this.threads = Pool.spawn(threads || defaults.pool.size);\n    this.idleThreads = this.threads.slice();\n    this.jobQueue = [];\n    this.runArgs = [];\n\n    this.on('newJob', (job) => this.handleNewJob(job));\n    this.on('threadAvailable', () => this.dequeue());\n  }\n\n  run(args) {\n    this.runArgs = args;\n    return this;\n  }\n\n  send(...args) {\n    if (!this.runArgs) {\n      throw new Error('Pool.send() called without prior Pool.run(). You need to define what to run first.');\n    }\n\n    let job = new Job(this);\n    job.run(this.runArgs);\n    return job.send(...args);\n  }\n\n  killAll() {\n    this.threads.forEach(thread => {\n      thread.kill();\n    });\n  }\n\n  queueJob(job) {\n    this.jobQueue.push(job);\n    this.dequeue();\n  }\n\n  dequeue() {\n    if (this.jobQueue.length === 0 || this.idleThreads.length === 0) {\n      return;\n    }\n\n    const job = this.jobQueue.shift();\n    const thread = this.idleThreads.shift();\n\n    job\n      .once('done', (...args) => this.handleJobSuccess(thread, job, ...args))\n      .once('error', (...args) => this.handleJobError(thread, job, ...args));\n\n    job.executeOn(thread);\n  }\n\n  handleNewJob(job) {\n    this.lastCreatedJob = job;\n    job.once('readyToRun', () => this.queueJob(job));    // triggered by job.send()\n  }\n\n  handleJobSuccess(thread, job, ...responseArgs) {\n    this.emit('done', job, ...responseArgs);\n    this.handleJobDone(thread);\n  }\n\n  handleJobError(thread, job, error) {\n    this.emit('error', job, error);\n    this.handleJobDone(thread);\n  }\n\n  handleJobDone(thread) {\n    this.idleThreads.push(thread);\n    this.emit('threadAvailable');\n\n    if (this.idleThreads.length === this.threads.length) {\n      // run deferred to give other job.on('done') handlers time to run first\n      setTimeout(() => { this.emit('finished'); }, 0);\n    }\n  }\n}\n\nPool.spawn = (threadCount) => {\n  const threads = [];\n\n  for (let threadIndex = 0; threadIndex < threadCount; threadIndex++) {\n    threads.push(spawn());\n  }\n\n  return threads;\n};\n"],"sourceRoot":"/source/"}