{"version":3,"sources":["config.js"],"names":[],"mappings":";;;;;AAAA,IAAI,aAAa,GAAG;AAClB,UAAQ,EAAG;AACT,QAAI,EAAG,EAAE;AACT,OAAG,EAAI,EAAE;GACV;AACD,UAAQ,EAAG;AACT,kBAAc,EAAG,EAAE;GACpB;CACF,CAAC;;AAEF,SAAS,eAAe,CAAC,OAAO,EAAE,MAAM,EAAsB;MAApB,aAAa,yDAAG,EAAE;;AAC1D,QAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,OAAO,EAAK;AACvC,QAAI,QAAQ,GAAG,MAAM,CAAE,OAAO,CAAE,CAAC;AACjC,QAAM,oBAAoB,GAAG,aAAa,CAAC,MAAM,CAAC,CAAE,OAAO,CAAE,CAAC,CAAC;;AAE/D,QAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AAChC,UAAI,OAAO,OAAO,CAAE,OAAO,CAAE,KAAK,WAAW,IAAI,OAAO,OAAO,CAAE,OAAO,CAAE,KAAK,QAAQ,EAAE;AACvF,cAAM,IAAI,KAAK,CAAC,gDAAgD,GAAG,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;OACpG;AACD,qBAAe,CAAC,OAAO,CAAE,OAAO,CAAE,EAAE,QAAQ,EAAE,oBAAoB,CAAC,CAAC;KACrE,MAAM;AACL,UAAI,OAAO,OAAO,CAAE,OAAO,CAAE,KAAK,QAAQ,EAAE;AAC1C,cAAM,IAAI,KAAK,CAAC,4CAA4C,GAAG,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;OAChG;AACD,aAAO,CAAE,OAAO,CAAE,GAAG,QAAQ,CAAC;KAC/B;GACF,CAAC,CAAC;CACJ;;AAED,IAAM,MAAM,GAAG;AACb,KAAG,EAAE;WAAM,aAAa;GAAA;;AAExB,KAAG,EAAE,aAAC,SAAS,EAAK;AAClB,QAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;AACjC,YAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC5C;;AAED,mBAAe,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;GAC3C;CACF,CAAC;;qBAEa,MAAM;;AAEd,SAAS,SAAS,GAAI;AAC3B,SAAO,MAAM,CAAC,GAAG,EAAE,CAAC;CACrB;;AAEM,SAAS,SAAS,GAAW;AAClC,SAAO,MAAM,CAAC,GAAG,MAAA,CAAV,MAAM,YAAa,CAAC;CAC5B","file":"config.js","sourcesContent":["let configuration = {\n  basepath : {\n    node : '',\n    web  : ''\n  },\n  fallback : {\n    slaveScriptUrl : ''\n  }\n};\n\nfunction configDeepMerge(destObj, srcObj, ancestorProps = []) {\n  Object.keys(srcObj).forEach((propKey) => {\n    let srcValue = srcObj[ propKey ];\n    const ancestorPropsAndThis = ancestorProps.concat([ propKey ]);\n\n    if (typeof srcValue === 'object') {\n      if (typeof destObj[ propKey ] !== 'undefined' && typeof destObj[ propKey ] !== 'object') {\n        throw new Error('Expected config property not to be an object: ' + ancestorPropsAndThis.join('.'));\n      }\n      configDeepMerge(destObj[ propKey ], srcValue, ancestorPropsAndThis);\n    } else {\n      if (typeof destObj[ propKey ] === 'object') {\n        throw new Error('Expected config property to be an object: ' + ancestorPropsAndThis.join('.'));\n      }\n      destObj[ propKey ] = srcValue;\n    }\n  });\n}\n\nconst config = {\n  get: () => configuration,\n\n  set: (newConfig) => {\n    if (typeof newConfig !== 'object') {\n      throw new Error('Expected config object.');\n    }\n\n    configDeepMerge(configuration, newConfig);\n  }\n};\n\nexport default config;\n\nexport function getConfig () {\n  return config.get();\n}\n\nexport function setConfig (...args) {\n  return config.set(...args);\n}\n"],"sourceRoot":"/source/"}